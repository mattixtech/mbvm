#!/bin/bash
################################################################################
# Project:     MBVM
# File:        build
# Author:      Matthew Brooks
# Created:     2018-07-21
################################################################################

################################################################################
# Description:
# 
#   A build script for generating the executable code using GCC on a *Nix
# system.
################################################################################

################################################################################
# Verify prerequisites.
#
# return:
#   0 - Verification successful
#   1 - Verification error
################################################################################
verify()
{
    # Make sure GCC is available
    gcc -v > /dev/null 2>&1

    if [ $? -ne 0 ]; then
      return 1
    fi

    return 0
}

################################################################################
# Create an output directory for the executable.
#
# in:
#   $1 - The directory to create
#
# return:
#   0 - Directory was created
#   1 - Problem creating directory
################################################################################
create_output_dir()
{
    local output_dir="$1"

    # Create an exec directory to store the built executable
    if ! [ -d "$output_dir" ]; then
        mkdir "$output_dir"

        if [ $? -ne 0 ]; then
            return 1
        fi
    fi

    return 0
}

################################################################################
# Verifies the build worked.
################################################################################
verify_build()
{
    if [ $? -eq 0 ]; then
        echo "Build complete."
    else
        Exit "Build failure!"
    fi
}

################################################################################
# Exit with an error.
#
# in:
#   $1 - The error to print
################################################################################
Exit()
{
    local error="$1"

    if ! [ -z "$error" ]; then
        echo -e "ERROR: $error"
    fi

    exit 1
}

# Get the directory this script was executed in
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" > /dev/null)" && pwd)"
# The name of the executable to generate
EXE_FILE="mbvm"
# The name of the test executable to generate
TEST_EXE_FILE="mbvm_test"
# The output directory for the executable
EXEC_DIR="$DIR/exec"
# Options to pass to GCC
GCC_EXTRA_OPTIONS=""
# GCC debug options
GCC_DEBUG_OPTIONS="-Wall -Wextra -g"

# Check for debugging flag
while getopts "dt" args; do
  case $args in
    d)
        GCC_EXTRA_OPTIONS+=" $GCC_DEBUG_OPTIONS"
        ;;
    t)
        GCC_EXTRA_OPTIONS+=" $GCC_DEBUG_OPTIONS"
        BUILD_TESTS=1
        break
      ;;
  esac
done

echo "Verifying..."

if ! verify; then
    Exit "Failed to verify prerequisites!"
fi

if ! create_output_dir "$EXEC_DIR"; then
    Exit "Failed to create exec directory!"
fi



if ((BUILD_TESTS)); then
    echo "Building tests..."
    SOURCE_FILES="$(find $DIR/src/* -type f -name '*.c' -print)"

    if [ -z "$SOURCE_FILES" ]; then
        Exit "Failed to find source files!"
    fi

    # mindepth 2 here to ignore the 'main' c file
    SOURCE_FILES="$(find $DIR/src/ -mindepth 2 -type f -name '*.c' -print) \
        $(find $DIR/tests/ -type f -name '*.c' -print)"
    gcc $GCC_EXTRA_OPTIONS -o "$EXEC_DIR/$TEST_EXE_FILE" $SOURCE_FILES -lcunit
    verify_build
else
    echo "Building..."
    # If we aren't building tests, we are building the main exe
    SOURCE_FILES="$(find $DIR/src/* -type f -name '*.c' -print)"

    if [ -z "$SOURCE_FILES" ]; then
        Exit "Failed to find source files!"
    fi

    gcc $GCC_EXTRA_OPTIONS -o "$EXEC_DIR/$EXE_FILE" $SOURCE_FILES
    verify_build
fi

exit 0
